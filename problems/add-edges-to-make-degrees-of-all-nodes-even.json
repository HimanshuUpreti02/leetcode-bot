{"problemName":"add-edges-to-make-degrees-of-all-nodes-even","language":"cpp","code":"class Solution {\npublic:\n    bool isneigh( unordered_map<int,unordered_set<int>>& umap,int n,int tar){\n        if(n==tar) return 1;\n        if(umap[n].count(tar)&&umap[tar].count(n)) return 1;\n        return 0;\n    }\n   \n    \n    \n    \n    bool isPossible(int n, vector<vector<int>>& edges) {\n        unordered_map<int,unordered_set<int>> umap;\n       \n          unordered_map<int,int>degree;\n        for(auto i:edges){\n            umap[i[0]].insert(i[1]);\n            umap[i[1]].insert(i[0]);\n            degree[i[1]]++;\n            degree[i[0]]++;\n            \n        }\n        \n      \n        queue<int> que;\n       \n        for(auto i:degree){\n            if(i.second%2!=0){\n                que.push(i.first);\n            }\n        }\n \n        if(que.size()==0) return 1;\n        if(que.size()>4||que.size()<2) return 0;\n        if(que.size()==2){\n            int first=que.front();\n            que.pop();\n            int sec=que.front();\n            que.pop();\n            \n            if(isneigh(umap,first,sec)&&n>2){\n                for(int i=1;i<=n;i++){\n                    if(!isneigh(umap,first,i)&&!isneigh(umap,sec,i)) return 1;\n                }\n            }\n            que.push(first);\n            \n            que.push(sec);\n            \n        }\n        cout<<que.size()<<\" \";\n        \n        for(int i=1;i<=n;i++){\n            \n            if(degree[i]%2!=0){\n                int s=que.size();\n                \n                while(s--){\n                    int tp=que.front();\n                    que.pop();\n                   \n                    if(!isneigh(umap,i,tp)){\n                         // cout<<tp<<\" \"<<i<<\" \"<<s<<endl;\n                    \n                        degree[tp]++;\n                        degree[i]++;\n                        break;\n                    }else que.push(tp);\n                }\n                if(degree[i]%2!=0)return 0;\n            \n            }\n        \n        }\n         return 1;          \n    }\n};"}