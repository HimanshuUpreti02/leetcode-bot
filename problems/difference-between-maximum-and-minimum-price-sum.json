{"problemName":"difference-between-maximum-and-minimum-price-sum","language":"cpp","code":"class Solution {\npublic:\n    unordered_map<int,unordered_map<int,long long>> dp;\n    long long cost=0;\n    long long helper(unordered_map<int,vector<int>>& umap,int curr,vector<int>& price,int par){\n        long long mx=0;\n        if(dp[curr].count(par)) return dp[curr][par];\n        for(auto i:umap[curr]){\n            if(i==par) continue;\n            mx=max(mx,helper(umap,i,price,curr));\n        }\n        return dp[curr][par]=price[curr]+mx;\n    }\n    long long maxOutput(int n, vector<vector<int>>& edges, vector<int>& price) {\n        \n        unordered_map<int,vector<int>> umap;\n        for(auto neigh:edges){\n            umap[neigh[0]].push_back(neigh[1]);\n            umap[neigh[1]].push_back(neigh[0]);\n        }\n        unordered_set<int> vis;\n        \n        for(auto i:umap){\n            if(i.second.size()==1){\n                cost=max(cost,helper(umap,i.first,price,-1)-price[i.first]);\n            }\n            \n        }\n        \n        \n        return cost;\n    }\n};"}