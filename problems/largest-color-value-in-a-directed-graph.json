{"problemName":"largest-color-value-in-a-directed-graph","language":"cpp","code":"// OJ: https://leetcode.com/contest/weekly-contest-240/problems/largest-color-value-in-a-directed-graph/\r\n// Author: github.com/lzl124631x\r\n// Time: O(V + E)\r\n// Space: O(V + E)\r\nclass Solution {\r\n    typedef array<int, 26> T;\r\npublic:\r\n    int largestPathValue(string C, vector<vector<int>>& E) {\r\n        unordered_map<int, vector<int>> G;\r\n        vector<int> indegree(C.size());\r\n        for (auto &e : E) {\r\n            G[e[0]].push_back(e[1]); \r\n            indegree[e[1]]++; \r\n        }\r\n        vector<T> cnt(C.size(), T{});\r\n        queue<int> q;\r\n        for (int i = 0; i < C.size(); ++i) {\r\n            if (indegree[i] == 0) {\r\n                q.push(i);\r\n                cnt[i][C[i] - 'a'] = 1; \r\n            }\r\n        }\r\n        int ans = 0, seen = 0;\r\n        while (q.size()) {\r\n            auto u = q.front();\r\n            q.pop();\r\n            int val = *max_element(begin(cnt[u]), end(cnt[u]));\r\n            ans = max(ans, val);\r\n            ++seen;\r\n            for (int v : G[u]) {\r\n                for (int i = 0; i < 26; ++i) {\r\n                    cnt[v][i] = max(cnt[v][i], cnt[u][i] + (i == C[v] - 'a'));\r\n                }\r\n                if (--indegree[v] == 0) {\r\n                    q.push(v);\r\n                }\r\n            }\r\n        }\r\n        return seen < C.size() ? -1 : ans;\r\n    }\r\n};"}