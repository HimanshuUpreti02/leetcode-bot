{"problemName":"amount-of-time-for-binary-tree-to-be-infected","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    map<int, TreeNode*> val;\n    map<TreeNode*, TreeNode*> par;\n    map<TreeNode*, int> vis;\n    void dfs(TreeNode *curr, TreeNode *parent){\n        if(curr == NULL)return;\n        par[curr] = parent;\n        val[curr->val] = curr;\n        dfs(curr->left, curr);\n        dfs(curr->right, curr);\n    }\n    int amountOfTime(TreeNode* root, int start) {\n        dfs(root, NULL);\n        queue<TreeNode *> q;\n        int ans = 0;\n        q.push(val[start]);\n        while(!q.empty()){\n            int n = q.size();\n            for(int i = 0; i < n; i++){\n                TreeNode *f = q.front();\n                q.pop();\n                if(f == NULL || vis[f] == 1)continue;\n                vis[f] = 1;\n                q.push(f->left);\n                q.push(f->right);\n                q.push(par[f]);\n            }\n            ans++;\n        }\n        return ans - 2;\n    }\n};"}